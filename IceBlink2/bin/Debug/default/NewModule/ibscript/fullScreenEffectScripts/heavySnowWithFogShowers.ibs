			//Weather runs in channels 5 to 10
			//If you set a channel to True, you must (re-)define its settings below
			//If you set a channel to False, you can ignore the existing settings for the channel in the script here 
			//use efefcts taht shall be drawn on top in the later channels, eg channel 10 is drawn over everything (good for e.g. clouds)
%CurrentArea.useFullScreenEffectLayer5 = "True"
%CurrentArea.useFullScreenEffectLayer6 = "True"
%CurrentArea.useFullScreenEffectLayer7 = "True"
%CurrentArea.useFullScreenEffectLayer8 = "True"
%CurrentArea.useFullScreenEffectLayer9 = "False"
%CurrentArea.useFullScreenEffectLayer10 = "False"
		
			//XXXXXXXXXXfull screen effect layer 5XXXXXXXXXXXXX
			//XXXXX Most Relevant Values:name of .png and how it is moved XXXXXX
			//you can (by script) set channels to be not affected by weather at all, likely when you need more than channels 1 to 4 for other full screen effects
if (%CurrentArea.changeableByWeatherScript5 = "True")
			//known layer.png names (feel free to add more grapics): 
                        //lightFogLayerA, lightFogLayerB, fogLayerA, fogLayerB, heavyFogLAyerA, heavyFogLayerB, 
                        //lightCloudLayerA, lightCloudLayerB, lightCloudLayerC, cloudLayerA, cloudLayerB, cloudLayerC, heavyCloudLayerA, heavyCloudLayerB, heavyCloudLayerC   
                        //lightRainLayerA, lightRainLayerB, rainLayerA, rainLayerB, heavyRainLayerA, heavyRainLayerB
			//lightSnowLayerA, lightSnowLayerB, snowLayerA, snowLayerB,heavySnowLayerA, heavySnowLayerB
                        //lightningLayerA, lightningLayerB
			//see special naming rules for these .png below under shape changing animations (short: give the .png numbers at the end, starting with 1, define here without any number)
%CurrentArea.fullScreenEffectLayerName5  = "heavySnowLayerA"	
 			//setting up the (override) movement pattern, speeds and delay
        		//a value of -100 ("" in case of overrideIsNoScrollSource1) means that the default, ie predefined in code, setting of the override animation pattern for this parameter shall be used
        		//so far existing directional overrides:
			//linear (default; a move in the specified x and y direction, straight and scrolling, defaults with x to 1 and y to 1, no delay limit used) 
        		//rain (2 layers recommended; make one layer's y speed a little slower than default -2,8, like -2,4) 
        		//clouds (1_ layer recommended; defaults at 0,5y, 0,5x, 750 delay)
        		//snow (2 layers recommended; make one layer's y speed a little faster than default -0,55, like -0,65, mayhaps slower for x (default: 0,45 to e.g. 0,4), and overrideDelayLimit5 a little
                        //less than defaut 470, like 380) 
        		//fog (2 layers recommended, make one layer's overrideDelayLimit5  a little less than default 125, like 110, can also be used for a rolling ocean)
                        //randStraight (linear move that changes direction in one of the eight basic directions with a random chance once in a while, deafults at 0,5x 0,5y and 15 delay)
%CurrentArea.directionalOverride5  = "snow"
			//float, horizontal speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move left
%CurrentArea.overrideSpeedX5  = 0,4
			//float, vertical speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move up
%CurrentArea.overrideSpeedY5  = -0,65
			//int, relevant for movement patterns that have a randomized change of their movement vector going (ie all except linear) on, this determines the rate of random vector change
			//the higher, the slower, only positive numbers        
%CurrentArea.overrideDelayLimit5  = 380
			//leave at "" normally as the override move pattern chosen sets the nature of scroll/noscroll up automatically correctly
%CurrentArea.overrideIsNoScrollSource5  = ""

			//XXXXX Settings for shape changing weather animation XXXXX
			//Set to "True" to call a series of shape change frame .png; the first one should have its name end with 1, the second with 2, etc.
			//The fullScreenEffectLayerName5 above should contain a name WITHOUT the ending 1 as the 1 is added automatically by code
			//the names of the .png associated with this effect will be fullScreenEffectLayerName5+1,fullScreenEffectLayerName5+2...
			//Example: fullScreenEffectLayerName5  above is set to "changingPuffyCloud"
			//the .png in graphics folder might be named: changingPuffyCloud1, changingPuffyCloud2, changingPuffyCloud3,...    
%CurrentArea.isChanging5  = "False"
        		//float, the counter for this is increased by 1 each render call, when the limit is reached, the frame is changed to the next one, 
                        //so it determines speed of shape change, a higher limit means a slower shape change animation
%CurrentArea.changeLimit5  = 60
			//float, the number of different frames existing for the shape changing animation
%CurrentArea.changeNumberOfFrames5  = 4  
     
			//XXXXX Settings for animation that happen only randomly/frequently XXXXX 
			//int, this out of 100 chance is rolled for on each call of the doupdate() method, ie ech each step (or every few seconds if realTimeTimer is used)         
%CurrentArea.fullScreenEffectChanceToOccur5  = 5
			//int, the target channel will be set to active when the random chance for current channel is rolled
			//set target channel chance to occur to zero and and let it have the same numberOfCyclesPerOccurence as this channel to make them act totally in parallel 
%CurrentArea.activateTargetChannelInParallelToThisChannel5 = 6 
			//int, counted upward on each render and determines the point which animation ceases (and can be reactivted by random roll for chance to occur)
			//zero as value for numberOfCyclesPerOccurence signifies an endlessly running animation, also means no random rolls for activation
                        //you can use a negative number here to define how many animation frames of a shape changing animation shall excatly be dsplayed before the animation ends 
                        //using -8 would play an 8 frames lightning exactly once
%CurrentArea.numberOfCyclesPerOccurence5  = 4
			//If set to True, the cyclic effect is fading in as well as fading out at the start and end of its lifetime
%CurrentArea.useCyclicFade5  = "True"

			//XXXXX Other settings XXXXX
			//If set to false the animation is always centered above party, even near map border (usually best), otherwise it looses this focus when approaching border, retaining itself fully on map 
%CurrentArea.containEffectInsideAreaBorders5  = "False"
			//as weather usually happens above party, this set to True by default; can be set to false to display stuff below the party (like e.g. some other fullscreen effects as the sea do)
			//note on effect draw order: top is always drawn over bottom, within each group higher number is drawn over lower number
%CurrentArea.FullScreenEffectLayer5IsTop = "True"

endif
			//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
//XXXXXXXXXXfull screen effect layer 6XXXXXXXXXXXXX
			//XXXXX Most Relevant Values:name of .png and how it is moved XXXXXX
			//you can (by script) set channels to be not affected by weather at all, likely when you need more than channels 1 to 4 for other full screen effects
if (%CurrentArea.changeableByWeatherScript6 = "True")
			//known layer.png names (feel free to add more grapics): 
                        //lightFogLayerA, lightFogLayerB, fogLayerA, fogLayerB, heavyFogLAyerA, heavyFogLayerB, 
                        //lightCloudLayerA, lightCloudLayerB, lightCloudLayerC, cloudLayerA, cloudLayerB, cloudLayerC, heavyCloudLayerA, heavyCloudLayerB, heavyCloudLayerC   
                        //lightRainLayerA, lightRainLayerB, rainLayerA, rainLayerB, heavyRainLayerA, heavyRainLayerB
			//lightSnowLayerA, lightSnowLayerB, snowLayerA, snowLayerB,heavySnowLayerA, heavySnowLayerB
                        //lightningLayerA, lightningLayerB
			//see special naming rules for these .png below under shape changing animations (short: give the .png numbers at the end, starting with 1, define here without any number)
%CurrentArea.fullScreenEffectLayerName6  = "heavySnowLayerB"	
 			//setting up the (override) movement pattern, speeds and delay
        		//a value of -100 ("" in case of overrideIsNoScrollSource1) means that the default, ie predefined in code, setting of the override animation pattern for this parameter shall be used
        		//so far existing directional overrides:
			//linear (default; a move in the specified x and y direction, straight and scrolling, defaults with x to 1 and y to 1, no delay limit used) 
        		//rain (2 layers recommended; make one layer's y speed a little slower than default -2,8, like -2,4) 
        		//clouds (1_ layer recommended; defaults at 0,5y, 0,5x, 750 delay)
        		//snow (2 layers recommended; make one layer's y speed a little faster than default -0,55, like -0,65, mayhaps slower for x (default: 0,45 to e.g. 0,4), and overrideDelayLimit5 a little
                        //less than defaut 470, like 380) 
        		//fog (2 layers recommended, make one layer's overrideDelayLimit5  a little less than default 125, like 110, can also be used for a rolling ocean)
                        //randStraight ()
%CurrentArea.directionalOverride6  = "snow"
			//float, horizontal speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move left
%CurrentArea.overrideSpeedX6  = -100
			//float, vertical speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move up
%CurrentArea.overrideSpeedY6  = -100
			//int, relevant for movement patterns that have a randomized change of their movement vector going (ie all except linear) on, this determines the rate of random vector change
			//the higher, the slower, only positive numbers        
%CurrentArea.overrideDelayLimit6  = -100
			//leave at "" normally as the override move pattern chosen sets the nature of scroll/noscroll up automatically correctly
%CurrentArea.overrideIsNoScrollSource6  = ""

			//XXXXX Settings for shape changing weather animation XXXXX
			//Set to "True" to call a series of shape change frame .png; the first one should have its name end with 1, the second with 2, etc.
			//The fullScreenEffectLayerName5 above should contain a name WITHOUT the ending 1 as the 1 is added automatically by code
			//the names of the .png associated with this effect will be fullScreenEffectLayerName5+1,fullScreenEffectLayerName5+2...
			//Example: fullScreenEffectLayerName5  above is set to "changingPuffyCloud"
			//the .png in graphics folder might be named: changingPuffyCloud1, changingPuffyCloud2, changingPuffyCloud3,...    
%CurrentArea.isChanging6  = "False"
        		//float, the counter for this is increased by 1 each render call, when the limit is reached, the frame is changed to the next one, 
                        //so it determines speed of shape change, a higher limit means a slower shape change animation
%CurrentArea.changeLimit6  = 60
			//float, the number of different frames existing for the shape changing animation
%CurrentArea.changeNumberOfFrames6  = 4  
     
			//XXXXX Settings for animation that happen only randomly/frequently XXXXX 
			//int, this out of 100 chance is rolled for on each call of the doupdate() method, ie ech each step (or every few seconds if realTimeTimer is used)         
%CurrentArea.fullScreenEffectChanceToOccur6  = 0
			//int, the target channel will be set to active when the random chance for current channel is rolled
			//set target channel chance to occur to zero and and let it have the same numberOfCyclesPerOccurence as this channel to make them act totally in parallel 
%CurrentArea.activateTargetChannelInParallelToThisChannel6 = 0 
			//int, counted upward on each render and determines the point which animation ceases (and can be reactivted by random roll for chance to occur)
			//zero as value for numberOfCyclesPerOccurence signifies an endlessly running animation, also means no random rolls for activation
                        //you can use a negative number here to define how many animation frames of a shape changing animation shall excatly be dsplayed before the animation ends 
                        //using -8 would play an 8 frames lightning exactly once
%CurrentArea.numberOfCyclesPerOccurence6  = 4
			//If set to True, the cyclic effect is fading in as well as fading out at the start and end of its lifetime
%CurrentArea.useCyclicFade6  = "True"

			//XXXXX Other settings XXXXX
			//If set to false the animation is always centered above party, even near map border (usually best), otherwise it looses this focus when approaching border, retaining itself fully on map 
%CurrentArea.containEffectInsideAreaBorders6  = "False"
			//as weather usually happens above party, this set to True by default; can be set to false to display stuff below the party (like e.g. some other fullscreen effects as the sea do)
			//note on effect draw order: top is always drawn over bottom, within each group higher number is drawn over lower number
%CurrentArea.FullScreenEffectLayer6IsTop = "True"

endif
			//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

//XXXXXXXXXXfull screen effect layer 7XXXXXXXXXXXXX
			//XXXXX Most Relevant Values:name of .png and how it is moved XXXXXX
			//you can (by script) set channels to be not affected by weather at all, likely when you need more than channels 1 to 4 for other full screen effects
if (%CurrentArea.changeableByWeatherScript7 = "True")
			//known layer.png names (feel free to add more grapics): 
                        //lightFogLayerA, lightFogLayerB, fogLayerA, fogLayerB, heavyFogLAyerA, heavyFogLayerB, 
                        //lightCloudLayerA, lightCloudLayerB, lightCloudLayerC, cloudLayerA, cloudLayerB, cloudLayerC, heavyCloudLayerA, heavyCloudLayerB, heavyCloudLayerC   
                        //lightRainLayerA, lightRainLayerB, rainLayerA, rainLayerB, heavyRainLayerA, heavyRainLayerB
			//lightSnowLayerA, lightSnowLayerB, snowLayerA, snowLayerB,heavySnowLayerA, heavySnowLayerB
                        //lightningLayerA, lightningLayerB
			//see special naming rules for these .png below under shape changing animations (short: give the .png numbers at the end, starting with 1, define here without any number)
%CurrentArea.fullScreenEffectLayerName7  = "fogLayerA"	
 			//setting up the (override) movement pattern, speeds and delay
        		//a value of -100 ("" in case of overrideIsNoScrollSource1) means that the default, ie predefined in code, setting of the override animation pattern for this parameter shall be used
        		//so far existing directional overrides:
			//linear (default; a move in the specified x and y direction, straight and scrolling, defaults with x to 1 and y to 1, no delay limit used) 
        		//rain (2 layers recommended; make one layer's y speed a little slower than default -2,8, like -2,4) 
        		//clouds (1_ layer recommended; defaults at 0,5y, 0,5x, 750 delay)
        		//snow (2 layers recommended; make one layer's y speed a little faster than default -0,55, like -0,65, mayhaps slower for x (default: 0,45 to e.g. 0,4), and overrideDelayLimit5 a little
                        //less than defaut 470, like 380) 
        		//fog (2 layers recommended, make one layer's overrideDelayLimit5  a little less than default 125, like 110, can also be used for a rolling ocean)
                        //randStraight ()
%CurrentArea.directionalOverride7  = "fog"
			//float, horizontal speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move left
%CurrentArea.overrideSpeedX7  = -100
			//float, vertical speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move up
%CurrentArea.overrideSpeedY7  = -100
			//int, relevant for movement patterns that have a randomized change of their movement vector going (ie all except linear) on, this determines the rate of random vector change
			//the higher, the slower, only positive numbers        
%CurrentArea.overrideDelayLimit7  = 110
			//leave at "" normally as the override move pattern chosen sets the nature of scroll/noscroll up automatically correctly
%CurrentArea.overrideIsNoScrollSource7  = ""

			//XXXXX Settings for shape changing weather animation XXXXX
			//Set to "True" to call a series of shape change frame .png; the first one should have its name end with 1, the second with 2, etc.
			//The fullScreenEffectLayerName5 above should contain a name WITHOUT the ending 1 as the 1 is added automatically by code
			//the names of the .png associated with this effect will be fullScreenEffectLayerName5+1,fullScreenEffectLayerName5+2...
			//Example: fullScreenEffectLayerName5  above is set to "changingPuffyCloud"
			//the .png in graphics folder might be named: changingPuffyCloud1, changingPuffyCloud2, changingPuffyCloud3,...    
%CurrentArea.isChanging7  = "False"
        		//float, the counter for this is increased by 1 each render call, when the limit is reached, the frame is changed to the next one, 
                        //so it determines speed of shape change, a higher limit means a slower shape change animation
%CurrentArea.changeLimit7  = 60
			//float, the number of different frames existing for the shape changing animation
%CurrentArea.changeNumberOfFrames7  = 4  
     
			//XXXXX Settings for animation that happen only randomly/frequently XXXXX 
			//int, this out of 100 chance is rolled for on each call of the doupdate() method, ie ech each step (or every few seconds if realTimeTimer is used)         
%CurrentArea.fullScreenEffectChanceToOccur7  = 100
			//int, the target channel will be set to active when the random chance for current channel is rolled
			//set target channel chance to occur to zero and and let it have the same numberOfCyclesPerOccurence as this channel to make them act totally in parallel 
%CurrentArea.activateTargetChannelInParallelToThisChannel7 = 0 
			//int, counted upward on each render and determines the point which animation ceases (and can be reactivted by random roll for chance to occur)
			//zero as value for numberOfCyclesPerOccurence signifies an endlessly running animation, also means no random rolls for activation
                        //you can use a negative number here to define how many animation frames of a shape changing animation shall excatly be dsplayed before the animation ends 
                        //using -8 would play an 8 frames lightning exactly once
%CurrentArea.numberOfCyclesPerOccurence7  = 0
			//If set to True, the cyclic effect is fading in as well as fading out at the start and end of its lifetime
%CurrentArea.useCyclicFade7  = "True"

			//XXXXX Other settings XXXXX
			//If set to false the animation is always centered above party, even near map border (usually best), otherwise it looses this focus when approaching border, retaining itself fully on map 
%CurrentArea.containEffectInsideAreaBorders7  = "False"
			//as weather usually happens above party, this set to True by default; can be set to false to display stuff below the party (like e.g. some other fullscreen effects as the sea do)
			//note on effect draw order: top is always drawn over bottom, within each group higher number is drawn over lower number
%CurrentArea.FullScreenEffectLayer7IsTop = "True"

endif
			//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

//XXXXXXXXXXfull screen effect layer 8XXXXXXXXXXXXX
			//XXXXX Most Relevant Values:name of .png and how it is moved XXXXXX
			//you can (by script) set channels to be not affected by weather at all, likely when you need more than channels 1 to 4 for other full screen effects
if (%CurrentArea.changeableByWeatherScript8 = "True")
			//known layer.png names (feel free to add more grapics): 
                        //lightFogLayerA, lightFogLayerB, fogLayerA, fogLayerB, heavyFogLAyerA, heavyFogLayerB, 
                        //lightCloudLayerA, lightCloudLayerB, lightCloudLayerC, cloudLayerA, cloudLayerB, cloudLayerC, heavyCloudLayerA, heavyCloudLayerB, heavyCloudLayerC   
                        //lightRainLayerA, lightRainLayerB, rainLayerA, rainLayerB, heavyRainLayerA, heavyRainLayerB
			//lightSnowLayerA, lightSnowLayerB, snowLayerA, snowLayerB,heavySnowLayerA, heavySnowLayerB
                        //lightningLayerA, lightningLayerB
			//see special naming rules for these .png below under shape changing animations (short: give the .png numbers at the end, starting with 1, define here without any number)
%CurrentArea.fullScreenEffectLayerName8  = "fogLayerB"	
 			//setting up the (override) movement pattern, speeds and delay
        		//a value of -100 ("" in case of overrideIsNoScrollSource1) means that the default, ie predefined in code, setting of the override animation pattern for this parameter shall be used
        		//so far existing directional overrides:
			//linear (default; a move in the specified x and y direction, straight and scrolling, defaults with x to 1 and y to 1, no delay limit used) 
        		//rain (2 layers recommended; make one layer's y speed a little slower than default -2,8, like -2,4) 
        		//clouds (1_ layer recommended; defaults at 0,5y, 0,5x, 750 delay)
        		//snow (2 layers recommended; make one layer's y speed a little faster than default -0,55, like -0,65, mayhaps slower for x (default: 0,45 to e.g. 0,4), and overrideDelayLimit5 a little
                        //less than defaut 470, like 380) 
        		//fog (2 layers recommended, make one layer's overrideDelayLimit5  a little less than default 125, like 110, can also be used for a rolling ocean)
                        //randStraight ()
%CurrentArea.directionalOverride8  = "fog"
			//float, horizontal speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move left
%CurrentArea.overrideSpeedX8  = -100
			//float, vertical speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move up
%CurrentArea.overrideSpeedY8  = -100
			//int, relevant for movement patterns that have a randomized change of their movement vector going (ie all except linear) on, this determines the rate of random vector change
			//the higher, the slower, only positive numbers        
%CurrentArea.overrideDelayLimit8  = -100
			//leave at "" normally as the override move pattern chosen sets the nature of scroll/noscroll up automatically correctly
%CurrentArea.overrideIsNoScrollSource8  = ""

			//XXXXX Settings for shape changing weather animation XXXXX
			//Set to "True" to call a series of shape change frame .png; the first one should have its name end with 1, the second with 2, etc.
			//The fullScreenEffectLayerName5 above should contain a name WITHOUT the ending 1 as the 1 is added automatically by code
			//the names of the .png associated with this effect will be fullScreenEffectLayerName5+1,fullScreenEffectLayerName5+2...
			//Example: fullScreenEffectLayerName5  above is set to "changingPuffyCloud"
			//the .png in graphics folder might be named: changingPuffyCloud1, changingPuffyCloud2, changingPuffyCloud3,...    
%CurrentArea.isChanging8  = "False"
        		//float, the counter for this is increased by 1 each render call, when the limit is reached, the frame is changed to the next one, 
                        //so it determines speed of shape change, a higher limit means a slower shape change animation
%CurrentArea.changeLimit8  = 60
			//float, the number of different frames existing for the shape changing animation
%CurrentArea.changeNumberOfFrames8  = 4  
     
			//XXXXX Settings for animation that happen only randomly/frequently XXXXX 
			//int, this out of 100 chance is rolled for on each call of the doupdate() method, ie ech each step (or every few seconds if realTimeTimer is used)         
%CurrentArea.fullScreenEffectChanceToOccur8  = 100
			//int, the target channel will be set to active when the random chance for current channel is rolled
			//set target channel chance to occur to zero and and let it have the same numberOfCyclesPerOccurence as this channel to make them act totally in parallel 
%CurrentArea.activateTargetChannelInParallelToThisChannel8 = 0 
			//int, counted upward on each render and determines the point which animation ceases (and can be reactivted by random roll for chance to occur)
			//zero as value for numberOfCyclesPerOccurence signifies an endlessly running animation, also means no random rolls for activation
                        //you can use a negative number here to define how many animation frames of a shape changing animation shall excatly be dsplayed before the animation ends 
                        //using -8 would play an 8 frames lightning exactly once
%CurrentArea.numberOfCyclesPerOccurence8  = 0
			//If set to True, the cyclic effect is fading in as well as fading out at the start and end of its lifetime
%CurrentArea.useCyclicFade8  = "True"

			//XXXXX Other settings XXXXX
			//If set to false the animation is always centered above party, even near map border (usually best), otherwise it looses this focus when approaching border, retaining itself fully on map 
%CurrentArea.containEffectInsideAreaBorders8  = "False"
			//as weather usually happens above party, this set to True by default; can be set to false to display stuff below the party (like e.g. some other fullscreen effects as the sea do)
			//note on effect draw order: top is always drawn over bottom, within each group higher number is drawn over lower number
%CurrentArea.FullScreenEffectLayer8IsTop = "True"

endif
			//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

//XXXXXXXXXXfull screen effect layer 9XXXXXXXXXXXXX
			//XXXXX Most Relevant Values:name of .png and how it is moved XXXXXX
			//you can (by script) set channels to be not affected by weather at all, likely when you need more than channels 1 to 4 for other full screen effects
if (%CurrentArea.changeableByWeatherScript9 = "True")
			//known layer.png names (feel free to add more grapics): 
                        //lightFogLayerA, lightFogLayerB, fogLayerA, fogLayerB, heavyFogLAyerA, heavyFogLayerB, 
                        //lightCloudLayerA, lightCloudLayerB, lightCloudLayerC, cloudLayerA, cloudLayerB, cloudLayerC, heavyCloudLayerA, heavyCloudLayerB, heavyCloudLayerC   
                        //lightRainLayerA, lightRainLayerB, rainLayerA, rainLayerB, heavyRainLayerA, heavyRainLayerB
			//lightSnowLayerA, lightSnowLayerB, snowLayerA, snowLayerB,heavySnowLayerA, heavySnowLayerB
                        //lightningLayerA, lightningLayerB
			//see special naming rules for these .png below under shape changing animations (short: give the .png numbers at the end, starting with 1, define here without any number)
%CurrentArea.fullScreenEffectLayerName9  = "lightningLayerA"	
 			//setting up the (override) movement pattern, speeds and delay
        		//a value of -100 ("" in case of overrideIsNoScrollSource1) means that the default, ie predefined in code, setting of the override animation pattern for this parameter shall be used
        		//so far existing directional overrides:
			//linear (default; a move in the specified x and y direction, straight and scrolling, defaults with x to 1 and y to 1, no delay limit used) 
        		//rain (2 layers recommended; make one layer's y speed a little slower than default -2,8, like -2,4) 
        		//clouds (1_ layer recommended; defaults at 0,5y, 0,5x, 750 delay)
        		//snow (2 layers recommended; make one layer's y speed a little faster than default -0,55, like -0,65, mayhaps slower for x (default: 0,45 to e.g. 0,4), and overrideDelayLimit5 a little
                        //less than defaut 470, like 380) 
        		//fog (2 layers recommended, make one layer's overrideDelayLimit5  a little less than default 125, like 110, can also be used for a rolling ocean)
                        //randStraight ()
%CurrentArea.directionalOverride9  = "linear"
			//float, horizontal speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move left
%CurrentArea.overrideSpeedX9  = 0
			//float, vertical speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move up
%CurrentArea.overrideSpeedY9  = 0
			//int, relevant for movement patterns that have a randomized change of their movement vector going (ie all except linear) on, this determines the rate of random vector change
			//the higher, the slower, only positive numbers        
%CurrentArea.overrideDelayLimit9  = -100
			//leave at "" normally as the override move pattern chosen sets the nature of scroll/noscroll up automatically correctly
%CurrentArea.overrideIsNoScrollSource9  = ""

			//XXXXX Settings for shape changing weather animation XXXXX
			//Set to "True" to call a series of shape change frame .png; the first one should have its name end with 1, the second with 2, etc.
			//The fullScreenEffectLayerName5 above should contain a name WITHOUT the ending 1 as the 1 is added automatically by code
			//the names of the .png associated with this effect will be fullScreenEffectLayerName5+1,fullScreenEffectLayerName5+2...
			//Example: fullScreenEffectLayerName5  above is set to "changingPuffyCloud"
			//the .png in graphics folder might be named: changingPuffyCloud1, changingPuffyCloud2, changingPuffyCloud3,...    
%CurrentArea.isChanging9  = "True"
        		//float, the counter for this is increased by 1 each render call, when the limit is reached, the frame is changed to the next one, 
                        //so it determines speed of shape change, a higher limit means a slower shape change animation
%CurrentArea.changeLimit9  = 0
			//float, the number of different frames existing for the shape changing animation
%CurrentArea.changeNumberOfFrames9  = 8  
     
			//XXXXX Settings for animation that happen only randomly/frequently XXXXX 
			//int, this out of 100 chance is rolled for on each call of the doupdate() method, ie ech each step (or every few seconds if realTimeTimer is used)         
%CurrentArea.fullScreenEffectChanceToOccur9  = 5
			//int, the target channel will be set to active when the random chance for current channel is rolled
			//set target channel chance to occur to zero and and let it have the same numberOfCyclesPerOccurence as this channel to make them act totally in parallel 
%CurrentArea.activateTargetChannelInParallelToThisChannel9 = 0
			//int, counted upward on each render and determines the point which animation ceases (and can be reactivted by random roll for chance to occur)
			//zero as value for numberOfCyclesPerOccurence signifies an endlessly running animation, also means no random rolls for activation
                        //you can use a negative number here to define how many animation frames of a shape changing animation shall excatly be dsplayed before the animation ends 
                        //using -8 would play an 8 frames lightning exactly once
%CurrentArea.numberOfCyclesPerOccurence9  = -8
			//If set to True, the cyclic effect is fading in as well as fading out at the start and end of its lifetime
%CurrentArea.useCyclicFade9  = "True"

			//XXXXX Other settings XXXXX
			//If set to false the animation is always centered above party, even near map border (usually best), otherwise it looses this focus when approaching border, retaining itself fully on map 
%CurrentArea.containEffectInsideAreaBorders9  = "True"
			//as weather usually happens above party, this set to True by default; can be set to false to display stuff below the party (like e.g. some other fullscreen effects as the sea do)
			//note on effect draw order: top is always drawn over bottom, within each group higher number is drawn over lower number
%CurrentArea.FullScreenEffectLayer9IsTop = "True"

endif
			//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

//XXXXXXXXXXfull screen effect layer 10XXXXXXXXXXXXX
			//XXXXX Most Relevant Values:name of .png and how it is moved XXXXXX
			//you can (by script) set channels to be not affected by weather at all, likely when you need more than channels 1 to 4 for other full screen effects
if (%CurrentArea.changeableByWeatherScript10 = "True")
			//known layer.png names (feel free to add more grapics): 
                        //lightFogLayerA, lightFogLayerB, fogLayerA, fogLayerB, heavyFogLAyerA, heavyFogLayerB, 
                        //lightCloudLayerA, lightCloudLayerB, lightCloudLayerC, cloudLayerA, cloudLayerB, cloudLayerC, heavyCloudLayerA, heavyCloudLayerB, heavyCloudLayerC   
                        //lightRainLayerA, lightRainLayerB, rainLayerA, rainLayerB, heavyRainLayerA, heavyRainLayerB
			//lightSnowLayerA, lightSnowLayerB, snowLayerA, snowLayerB,heavySnowLayerA, heavySnowLayerB
                        //lightningLayerA, lightningLayerB
			//see special naming rules for these .png below under shape changing animations (short: give the .png numbers at the end, starting with 1, define here without any number)
%CurrentArea.fullScreenEffectLayerName10  = "lightningLayerB"	
 			//setting up the (override) movement pattern, speeds and delay
        		//a value of -100 ("" in case of overrideIsNoScrollSource1) means that the default, ie predefined in code, setting of the override animation pattern for this parameter shall be used
        		//so far existing directional overrides:
			//linear (default; a move in the specified x and y direction, straight and scrolling, defaults with x to 1 and y to 1, no delay limit used) 
        		//rain (2 layers recommended; make one layer's y speed a little slower than default -2,8, like -2,4) 
        		//clouds (1_ layer recommended; defaults at 0,5y, 0,5x, 750 delay)
        		//snow (2 layers recommended; make one layer's y speed a little faster than default -0,55, like -0,65, mayhaps slower for x (default: 0,45 to e.g. 0,4), and overrideDelayLimit5 a little
                        //less than defaut 470, like 380) 
        		//fog (2 layers recommended, make one layer's overrideDelayLimit5  a little less than default 125, like 110, can also be used for a rolling ocean)
                        //randStraight ()
%CurrentArea.directionalOverride10  = "linear"
			//float, horizontal speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move left
%CurrentArea.overrideSpeedX10  = 0
			//float, vertical speed (use "," instead of "." for fractions, so it is e.g. 2,8 and not 2.8), negative values mean move up
%CurrentArea.overrideSpeedY10  = 0
			//int, relevant for movement patterns that have a randomized change of their movement vector going (ie all except linear) on, this determines the rate of random vector change
			//the higher, the slower, only positive numbers        
%CurrentArea.overrideDelayLimit10  = -100
			//leave at "" normally as the override move pattern chosen sets the nature of scroll/noscroll up automatically correctly
%CurrentArea.overrideIsNoScrollSource10  = ""

			//XXXXX Settings for shape changing weather animation XXXXX
			//Set to "True" to call a series of shape change frame .png; the first one should have its name end with 1, the second with 2, etc.
			//The fullScreenEffectLayerName5 above should contain a name WITHOUT the ending 1 as the 1 is added automatically by code
			//the names of the .png associated with this effect will be fullScreenEffectLayerName5+1,fullScreenEffectLayerName5+2...
			//Example: fullScreenEffectLayerName5  above is set to "changingPuffyCloud"
			//the .png in graphics folder might be named: changingPuffyCloud1, changingPuffyCloud2, changingPuffyCloud3,...    
%CurrentArea.isChanging10  = "True"
        		//float, the counter for this is increased by 1 each render call, when the limit is reached, the frame is changed to the next one, 
                        //so it determines speed of shape change, a higher limit means a slower shape change animation
%CurrentArea.changeLimit10  = 0
			//float, the number of different frames existing for the shape changing animation
%CurrentArea.changeNumberOfFrames10  = 8  
     
			//XXXXX Settings for animation that happen only randomly/frequently XXXXX 
			//int, this out of 100 chance is rolled for on each call of the doupdate() method, ie ech each step (or every few seconds if realTimeTimer is used)         
%CurrentArea.fullScreenEffectChanceToOccur10  = 5
			//int, the target channel will be set to active when the random chance for current channel is rolled
			//set target channel chance to occur to zero and and let it have the same numberOfCyclesPerOccurence as this channel to make them act totally in parallel 
%CurrentArea.activateTargetChannelInParallelToThisChannel10 = 0 
			//int, counted upward on each render and determines the point which animation ceases (and can be reactivted by random roll for chance to occur)
			//zero as value for numberOfCyclesPerOccurence signifies an endlessly running animation, also means no random rolls for activation
                        //you can use a negative number here to define how many animation frames of a shape changing animation shall excatly be dsplayed before the animation ends 
                        //using -8 would play an 8 frames lightning exactly once
%CurrentArea.numberOfCyclesPerOccurence10  = -8
			//If set to True, the cyclic effect is fading in as well as fading out at the start and end of its lifetime
%CurrentArea.useCyclicFade10  = "False"

			//XXXXX Other settings XXXXX
			//If set to false the animation is always centered above party, even near map border (usually best), otherwise it looses this focus when approaching border, retaining itself fully on map 
%CurrentArea.containEffectInsideAreaBorders10  = "True"
			//as weather usually happens above party, this set to True by default; can be set to false to display stuff below the party (like e.g. some other fullscreen effects as the sea do)
			//note on effect draw order: top is always drawn over bottom, within each group higher number is drawn over lower number
%CurrentArea.FullScreenEffectLayer10IsTop = "True"

endif
			//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX			
